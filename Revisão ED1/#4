/*
O código apresenta uma lista duplamente ligada com operações básicas para inserir, deletar e imprimir.

1 - comente o código.
2 - Modifique a operação de inserção de dados, para que o usuário seja capaz de inserir valores para a lista.
3 - Faça uma operação de buscar por um valor específico, informado pelo usuário, onde o programa deve apresentar se o valor foi encontrado e, em caso afirmativo, exibir detalhes(vizinhos) do nó correspondente.
*/
#include <stdio.h>
#include <stdlib.h>

// Definição do nó da lista duplamente ligada
typedef struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
} Node;

Node* head = NULL;  // Cabeça da lista

// Insere um novo nó no início da lista
void insertFront(int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));  
    newNode->data = value;                        
    newNode->next = head;                         
    newNode->prev = NULL;                         
    if (head != NULL)                             
        head->prev = newNode;                     
    head = newNode;                               
}

// Deleta um nó específico da lista
void deleteNode(Node* node) {
    if (node == head)                             
        head = node->next;                        
    if (node->next != NULL)                       
        node->next->prev = node->prev;            
    if (node->prev != NULL)                       
        node->prev->next = node->next;            
    free(node);                                   
}

// Imprime a lista do início ao fim
void printList() {
    Node* temp = head;                            
    while (temp != NULL) {                        
        printf("%d ", temp->data);                
        temp = temp->next;                        
    }
    printf("\n");
}

// Busca um valor específico na lista e exibe seus vizinhos
void search(int value) {
    Node* temp = head;                            
    while (temp != NULL) {                        
        if (temp->data == value) {                
            printf("Valor %d encontrado.\n", value);
            if (temp->prev != NULL)               
                printf("Valor anterior: %d\n", temp->prev->data);
            else
                printf("Não há valor anterior.\n");
            if (temp->next != NULL)               
                printf("Próximo valor: %d\n", temp->next->data);
            else
                printf("Não há próximo valor.\n");
            return;                               
        }
        temp = temp->next;                        
    }
    printf("Valor %d não encontrado.\n", value);  
}

int main() {
    int choice, value;

    do {
        printf("\n1. Inserir valor\n2. Deletar nó\n3. Imprimir lista\n4. Buscar valor\n5. Sair\nEscolha uma opção: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Digite um valor para inserir: ");
                scanf("%d", &value);
                insertFront(value);               // Insere o valor fornecido pelo usuário no início da lista
                break;
            case 2:
                if (head == NULL) {
                    printf("A lista está vazia.\n");
                } else {
                    printf("Digite o valor do nó a ser deletado: ");
                    scanf("%d", &value);
                    Node* temp = head;
                    while (temp != NULL && temp->data != value) {
                        temp = temp->next;
                    }
                    if (temp != NULL) {
                        deleteNode(temp);         // Deleta o nó correspondente ao valor
                        printf("Nó deletado.\n");
                    } else {
                        printf("Valor não encontrado.\n");
                    }
                }
                break;
            case 3:
                printList();                      // Imprime a lista
                break;
            case 4:
                printf("Digite um valor para buscar: ");
                scanf("%d", &value);
                search(value);                    // Busca e exibe detalhes do nó correspondente
                break;
            case 5:
                printf("Saindo...\n");
                break;
            default:
                printf("Opção inválida!\n");
        }
    } while (choice != 5);

    return 0;
}
