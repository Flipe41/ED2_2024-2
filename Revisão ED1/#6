/*
O código abaixo apresenta a implementação de uma fila e suas operações básicas.

1 - comente o código
2 - implemente uma função para contar o número de elementos na fila.
3 - implemente uma função para limpar todos os elementos da fila, liberando memória apropriadamente.
*/

#include <stdio.h>
#include <stdlib.h>

// Estrutura de um nó na fila
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Estrutura da fila com ponteiros para o primeiro e último nó
typedef struct Queue {
    Node* front;
    Node* rear;
} Queue;

// Cria uma fila vazia
Queue* createQueue() {
    Queue* q = (Queue*)malloc(sizeof(Queue));
    if (q == NULL) {
        printf("Falha na alocação de memória para a fila.\n");
        return NULL;
    }
    q->front = q->rear = NULL; // Inicializa front e rear como NULL
    return q;
}

// Insere um elemento no final da fila
void enqueue(Queue* q, int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Falha na alocação de memória para o novo nó.\n");
        return;
    }
    newNode->data = value;
    newNode->next = NULL;
    if (q->rear == NULL) { // Se a fila está vazia
        q->front = q->rear = newNode; // O novo nó é o primeiro e o último
    } else { // Caso contrário
        q->rear->next = newNode;
        q->rear = newNode; // Atualiza o rear para o novo nó
    }
}

// Remove e retorna o primeiro elemento da fila
int dequeue(Queue* q) {
    if (q->front == NULL) { // Verifica se a fila está vazia
        printf("Fila está vazia.\n");
        return -1;
    }
    Node* temp = q->front; // Armazena o nó a ser removido
    int data = temp->data; // Armazena o dado do nó removido
    q->front = q->front->next; // Move o ponteiro front para o próximo nó
    if (q->front == NULL) {
        q->rear = NULL; // Se a fila fica vazia, rear também é NULL
    }
    free(temp); // Libera a memória do nó removido
    return data;
}

// Verifica se a fila está vazia
int isEmpty(Queue* q) {
    return q->front == NULL;
}

// Imprime os elementos da fila
void printQueue(Queue* q) {
    if (isEmpty(q)) {
        printf("A fila está vazia.\n");
        return;
    }
    Node* temp = q->front;
    printf("Elementos da fila: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Conta o número de elementos na fila
int countQueue(Queue* q) {
    int count = 0;
    Node* temp = q->front;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }
    return count;
}

// Limpa todos os elementos da fila e libera a memória
void clearQueue(Queue* q) {
    Node* temp;
    while (q->front != NULL) {
        temp = q->front;
        q->front = q->front->next;
        free(temp);
    }
    q->rear = NULL; // Rear também é NULL após a fila ser esvaziada
}

int main() {
    Queue* q = createQueue();
    enqueue(q, 10);
    enqueue(q, 20);
    enqueue(q, 30);
    printQueue(q);
    printf("Número de elementos na fila: %d\n", countQueue(q));

    printf("Desenfileirado: %d\n", dequeue(q));
    printQueue(q);
    printf("Número de elementos na fila: %d\n", countQueue(q));

    clearQueue(q);
    printQueue(q);
    printf("Número de elementos na fila: %d\n", countQueue(q));

    free(q); // Libera a memória alocada para a estrutura da fila
    return 0;
}
